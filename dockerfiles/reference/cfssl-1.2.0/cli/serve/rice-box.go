package serve

import (
	"time"

	"github.com/GeertJohan/go.rice/embedded"
)

func init() {

	// define files
	file3 := &embedded.EmbeddedFile{
		Filename:    "assets/cfssl.js",
		FileModTime: time.Unix(1459300464, 0),

		Content: string("(function() {\n  'use strict';\n  /* globals m */\n\n  // > framework extensions\n  m.deferred.resolve = function (value) {\n    var deferred = m.deferred();\n    deferred.resolve(value);\n    return deferred.promise;\n  };\n\n  m.deferred.reject = function (value) {\n    var deferred = m.deferred();\n    deferred.reject(value);\n    return deferred.promise;\n  };\n  // < framework extensions\n\n  var page = (function() {\n    var title = '';\n\n    return {\n      title: function(store) {\n        if (arguments.length > 0) {\n          title = store;\n\n          if (!title.length) {\n            document.title = 'CFSSL';\n          } else {\n            document.title = title + ' | CFSSL';\n          }\n        }\n\n        return title;\n      }\n    };\n  }());\n\n  // > i18n support\n  var phrases = {\n    'bundle.title': 'Bundle',\n    'bundle.action': 'Bundle',\n    'bundle.flavor': 'Flavor',\n    'bundle.ubiquitous': 'Ubiquitous',\n    'bundle.optimal': 'Optimal',\n    'bundle.force': 'Force',\n    'bundle.bundle.title': 'Bundled',\n    'common.server': 'Server',\n    'common.cipher': 'Cipher',\n    'common.packages': 'Packages',\n    'common.host': 'Host',\n    'scan.title': 'Scan',\n    'scan.action': 'Scan',\n    'scan.broad.title': 'Broad',\n    'scan.broad.description': 'Large scale scans of TLS hosts.',\n    'scan.broad.ICAs.title': 'Intermediate Certificate Authorities',\n    'scan.broad.ICAs.body': 'Scans a CIDR IP range for unknown Intermediate Certificate Authorities.',\n    'scan.connectivity.title': 'Connectivity',\n    'scan.connectivity.description': 'Scans for basic connectivity with the host through DNS and TCP/TLS dials.',\n    'scan.connectivity.DNSLookup.title': 'DNS Lookup',\n    'scan.connectivity.DNSLookup.body': 'Determines if the host can be resolved through DNS.',\n    'scan.connectivity.TCPDial.title': 'TCP Dial',\n    'scan.connectivity.TCPDial.body': 'Determines if host accepts TCP connection.',\n    'scan.connectivity.TLSDial.title': 'TLS Dial',\n    'scan.connectivity.TLSDial.body': 'Tests if host can perform TLS handshake.',\n    'scan.pki.title': 'Public-Key Infrastructure',\n    'scan.pki.description': 'Scans for the Public-Key Infrastructure.',\n    'scan.pki.ChainExpiration.title': 'Chain Expiration',\n    'scan.pki.ChainExpiration.body': 'Ensures host\\'s chain hasn\\'t expired and won\\'t expire in the next 30 days.',\n    'scan.pki.ChainValidation.title': 'Chain Validation',\n    'scan.pki.ChainValidation.body': 'Looks at all certificate in the host\\'s chain, and ensures they are all valid.',\n    'scan.tlshandshake.title': 'TLS Handshake',\n    'scan.tlshandshake.description': 'Scans for host\\'s SSL and TLS versions and cipher suite negotiation.',\n    'scan.tlshandshake.CipherSuite.title': 'Cipher Suite Matrix',\n    'scan.tlshandshake.CipherSuite.body': 'Determines host\\'s cipher suite accepted and prefered order.',\n    'scan.tlssession.title': 'TLS Session',\n    'scan.tlssession.description': 'Scans host\\'s implementation of TLS session resumption using session ticket and session IDs.',\n    'scan.tlssession.SessionResume.title': 'Session Resumption',\n    'scan.tlssession.SessionResume.body': 'Confirms the host is able to resume sessions across all addresses.',\n    'scan.tlssession.SessionResume.supports_session_resume': 'Supports Session Resumption'\n  };\n\n  // stub to replace with intl-messageformat\n  function Tformat(key) {\n    return phrases[key] || '';\n  }\n\n  // < i18n support\n\n  function appWrapper(module) {\n    function navLink(selector, route, name) {\n      var isActive = m.route().indexOf(route) === 0;\n      selector += '[href=\"' + route + '\"]';\n\n      return m('li' + (isActive ? '.active' : ''), [\n        m(selector, {\n          config: m.route\n        }, name)\n      ]);\n    }\n    return [\n      m('nav.navbar.navbar-default.navbar-static-top', [\n        m('.container', [\n          m('.navbar-header', [\n            m('a.navbar-brand[href=\"/\"]', {\n              config: m.route\n            }, 'CFSSL')\n          ]),\n          m('.collapse.navbar-collapse', [\n            m('ul.nav.navbar-nav', [\n              navLink('a', '/scan', Tformat('scan.title')),\n              navLink('a', '/bundle', Tformat('bundle.title'))\n            ]),\n            m('ul.nav.navbar-nav.navbar-right', [\n              m('li', m('a[href=\"https://pkg.cfssl.org\"]', Tformat('common.packages'))),\n              m('li', m('a[href=\"https://github.com/cloudflare/cfssl\"]', 'GitHub')),\n            ])\n          ])\n        ])\n      ]),\n      m('.container', module),\n      m('footer.container', {\n        style: {\n          paddingTop: '40px',\n          paddingBottom: '40px',\n          marginTop: '100px',\n          borderTop: '1px solid #e5e5e5',\n          textAlign: 'center'\n        }\n      }, [\n        m('p', [\n          'Code licensed under ',\n          m('a[href=\"https://github.com/cloudflare/cfssl/blob/master/LICENSE\"]', 'BSD-2-Clause'),\n          '.'\n        ])\n      ])\n    ];\n  }\n\n  var panel = {\n    view: function(ctrl, args, children) {\n      function gradeToGlyphicon(grade) {\n        switch(grade) {\n          case 'Good':\n            return 'glyphicon-ok-sign';\n          case 'Warning':\n            return 'glyphicon-exclamation-sign';\n          case 'Bad':\n            return 'glyphicon-remove-sign';\n          default:\n            return 'glyphicon-question-sign';\n        }\n      }\n\n      function gradeToPanel(grade) {\n        switch(grade) {\n          case 'Good':\n            return 'panel-success';\n          case 'Warning':\n            return 'panel-warning';\n          case 'Bad':\n            return 'panel-danger';\n          default:\n            return 'panel-default';\n        }\n      }\n\n      if (!args.grade) {\n        return m('.panel.panel-default', [\n          m('.panel-heading', args.title),\n          m('.panel-body', args.body),\n          children\n        ])\n      }\n\n      return m('.panel.' + gradeToPanel(args.grade), [\n        m('.panel-heading', [\n          m('span.glyphicon.' + gradeToGlyphicon(args.grade)),\n          ' ',\n          args.title\n        ]),\n        m('.panel-body', args.body),\n        children\n      ]);\n    }\n  };\n\n  var table = {\n    view: function(ctrl, args) {\n      return m('table.table.table-bordered.table-striped', [\n        m('thead', [\n          m('tr', args.columns.map(function(column) {\n            return m('th', column);\n          }))\n        ]),\n        m('tbody', args.rows.map(function(row) {\n          return m('tr', row.map(function(cell) {\n            return m('td', cell);\n          }));\n        }))\n      ]);\n    }\n  };\n\n  var listGroup = {\n    view: function(ctrl, children) {\n      return m('ul.list-group', children.map(function(item) {\n        return m('li.list-group-item', item);\n      }));\n    }\n  };\n\n  var home = {\n    controller: function() {\n      page.title('');\n      return;\n    },\n    view: function() {\n      return appWrapper([\n        m('h1.page-header', 'CFSSL: CloudFlare\\'s PKI toolkit'), m('p', [\n          'See ',\n          m('a[href=\"https://blog.cloudflare.com/introducing-cfssl\"]', 'blog post'),\n          ' or ',\n          m('a[href=\"https://github.com/cloudflare/cfssl\"]', 'contribute on GitHub'),\n          '.'\n        ])\n      ]);\n    }\n  };\n\n  var scan = {\n    vm: {\n      init: function(domain) {\n        scan.vm.domain = m.prop(domain ? domain : '');\n        scan.vm.loading = m.prop(false);\n        scan.vm.Scan = m.prop(false);\n        scan.vm.scan = function(evt) {\n          var domain = scan.vm.domain();\n          scan.vm.Scan(false);\n          scan.vm.loading(true);\n\n          if (evt) {\n            evt.preventDefault();\n          }\n\n          setTimeout(function() {\n            scan.Model.scan(domain).then(function(result) {\n              scan.vm.loading(false);\n              scan.vm.Scan(result);\n            });\n          }, 0);\n        };\n\n        // TODO: remove!\n        if (domain) {\n          scan.vm.loading(true);\n          setTimeout(function() {\n            scan.Model.scan(domain).then(function(result) {\n              scan.vm.loading(false);\n              scan.vm.Scan(result);\n            });\n          }, 0);\n        }\n      }\n    },\n    Model: function(data) {\n      this.domain = m.prop(data.domain);\n      this.IntermediateCAs = m.prop(data.IntermediateCAs);\n      this.DNSLookup = m.prop(data.DNSLookup);\n      this.TCPDial = m.prop(data.TCPDial);\n      this.TLSDial = m.prop(data.TLSDial);\n      this.ChainExpiration = m.prop(data.ChainExpiration);\n      this.ChainValidation = m.prop(data.ChainValidation);\n      this.CipherSuite = m.prop(data.CipherSuite);\n      this.SessionResume = m.prop(data.SessionResume);\n    },\n    controller: function() {\n      scan.vm.init(m.route.param('domain'));\n      page.title(Tformat('scan.title'))\n      return;\n    },\n    view: function() {\n      function broad() {\n        var ICAs = results.IntermediateCAs();\n        var out = [];\n\n        out.push(m('h3.page-header', Tformat('scan.broad.title')), m('p', Tformat('scan.broad.description')));\n\n        if (ICAs && ICAs.grade) {\n          out.push(m.component(panel, {\n            grade: ICAs.grade,\n            title: Tformat('scan.broad.ICAs.title'),\n            body: Tformat('scan.broad.ICAs.body')\n          }));\n        }\n\n        if (out.length === 2) {\n          return;\n        }\n\n        return out;\n      }\n\n      function connectivity() {\n        var DNSLookup = results.DNSLookup();\n        var TCPDial = results.TCPDial();\n        var TLSDial = results.TLSDial();\n        var out = [];\n\n        out.push(m('h3.page-header', Tformat('scan.connectivity.title')), m('p', Tformat('scan.connectivity.description')));\n\n        if (DNSLookup && DNSLookup.grade) {\n          out.push(m.component(panel, {\n            grade: DNSLookup.grade,\n            title: Tformat('scan.connectivity.DNSLookup.title'),\n            body: Tformat('scan.connectivity.DNSLookup.body')\n          }, m.component(listGroup, DNSLookup.output.sort())));\n        }\n\n        if (TCPDial && TCPDial.grade) {\n          out.push(m.component(panel, {\n            grade: TCPDial.grade,\n            title: Tformat('scan.connectivity.TCPDial.title'),\n            body: Tformat('scan.connectivity.TCPDial.body')\n          }));\n        }\n\n        if (TLSDial && TLSDial.grade) {\n          out.push(m.component(panel, {\n            grade: TLSDial.grade,\n            title: Tformat('scan.connectivity.TLSDial.title'),\n            body: Tformat('scan.connectivity.TLSDial.body')\n          }));\n        }\n\n        if (out.length === 2) {\n          return;\n        }\n\n        return out;\n      }\n\n      function tlssession() {\n        var SessionResume = results.SessionResume();\n        var out = [];\n        var body;\n\n        out.push(m('h3.page-header', Tformat('scan.tlssession.title')), m('p', Tformat('scan.tlssession.description')));\n\n        if (SessionResume && SessionResume.grade) {\n          body = null;\n          if (SessionResume.output) {\n            body = m.component(table, {\n              columns: [Tformat('common.server'), Tformat('scan.tlssession.SessionResume.supports_session_resume')],\n              rows: Object.keys(SessionResume.output).sort().map(function(ip) {\n                var supported = SessionResume.output[ip];\n\n                return [\n                  ip,\n                  m('span.glyphicon.glyphicon-' + (supported ? 'ok-sign' : 'remove-sign'))\n                ];\n              })\n            });\n          }\n\n          out.push(m.component(panel, {\n            grade: SessionResume.grade,\n            title: Tformat('scan.tlssession.SessionResume.title'),\n            body: Tformat('scan.tlssession.SessionResume.body')\n          }, body));\n        }\n\n        if (out.length === 2) {\n          return;\n        }\n\n        return out;\n      }\n\n      function pki() {\n        var ChainExpiration = results.ChainExpiration();\n        var ChainValidation = results.ChainValidation();\n        var out = [];\n        var body;\n\n        out.push(m('h3.page-header', Tformat('scan.pki.title')), m('p', Tformat('scan.pki.description')));\n\n        if (ChainExpiration && ChainExpiration.grade) {\n          body = null;\n          if (ChainExpiration.output) {\n            body = m.component(listGroup, [\n              m('time[datetime=\"' + ChainExpiration.output + '\"]', (new Date(ChainExpiration.output)).toLocaleString('bestfit', {\n                weekday: 'long',\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric',\n                hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                timeZone: 'UTC',\n                timeZoneName: 'short'\n              }))\n            ]);\n          }\n\n          out.push(m.component(panel, {\n            grade: ChainExpiration.grade,\n            title: Tformat('scan.pki.ChainExpiration.title'),\n            body: Tformat('scan.pki.ChainExpiration.body')\n          }, body));\n        }\n\n        if (ChainValidation && ChainValidation.grade) {\n          body = null;\n          if (ChainValidation.output && Array.isArray(ChainValidation.output)) {\n            body = m.component(listGroup, ChainValidation.output);\n          }\n\n          out.push(m.component(panel, {\n            grade: ChainValidation.grade,\n            title: Tformat('scan.pki.ChainValidation.title'),\n            body: Tformat('scan.pki.ChainValidation.body')\n          }, body));\n        }\n\n        if (out.length === 2) {\n          return\n        }\n\n        return out;\n      }\n\n      function tlshandshake() {\n        var CipherSuite = results.CipherSuite();\n        var out = [];\n        var body;\n\n        out.push(m('h3.page-header', Tformat('scan.tlshandshake.title')), m('p', Tformat('scan.tlshandshake.description')));\n\n        if (CipherSuite && CipherSuite.grade) {\n          body = null;\n          if (CipherSuite.output) {\n            body = m.component(table, {\n              columns: [Tformat('common.cipher'), 'TLS 1.2', 'TLS 1.1', 'TLS 1.0', 'SSL 3.0'],\n              rows: CipherSuite.output.map(function(results) {\n                var cipher = Object.keys(results)[0];\n                var result = results[cipher];\n\n                if (typeof result[0] === 'string') {\n                  return [\n                    cipher,\n                    result.indexOf('TLS 1.2') !== -1 ? m('span.glyphicon.glyphicon-ok-sign') : '-',\n                    result.indexOf('TLS 1.1') !== -1 ? m('span.glyphicon.glyphicon-ok-sign') : '-',\n                    result.indexOf('TLS 1.0') !== -1 ? m('span.glyphicon.glyphicon-ok-sign') : '-',\n                    result.indexOf('SSL 3.0') !== -1 ? m('span.glyphicon.glyphicon-remove-sign') : '-'\n                  ];\n                }\n\n                return [\n                  cipher,\n                  result[0] && result[0]['TLS 1.2'][0] || '-',\n                  result[1] && result[1]['TLS 1.1'][0] || '-',\n                  result[2] && result[2]['TLS 1.0'][0] || '-',\n                  result[3] && result[3]['SSL 3.0'][0] || '-',\n                ];\n              })\n            });\n          }\n\n          out.push(m.component(panel, {\n            grade: CipherSuite.grade,\n            title: Tformat('scan.tlshandshake.CipherSuite.title'),\n            body: Tformat('scan.tlshandshake.CipherSuite.body')\n          }, body));\n        }\n\n        if (out.length === 2) {\n          return\n        }\n\n        return out;\n      }\n\n      var results = scan.vm.Scan();\n      return appWrapper([\n        m('h1.page-header', Tformat('scan.title')),\n        m('form.form-horizontal', [\n          m('.form-group', [\n            m('label.col-sm-2.control-label[for=scanhost]', Tformat('common.host')),\n            m('.col-sm-8', [\n              m('input.form-control#scanhost[placeholder=\"cfssl.org\"]', {\n                value: scan.vm.domain(),\n                onchange: m.withAttr('value', scan.vm.domain)\n              })\n            ])\n          ]),\n          m('.form-group', [\n            m('.col-sm-offset-2 col-sm-10', [\n              m('button.btn.btn-default[type=\"submit\"]', {\n                onclick: scan.vm.scan,\n                disabled: scan.vm.loading()\n              }, Tformat('scan.action'))\n            ])\n          ])\n        ]),\n        !scan.vm.loading() ? '' : [\n          m('p', 'Scanning ' + scan.vm.domain())\n        ],\n        !results ? '' : [\n          m('h2.page-header', 'Results for ' + scan.vm.Scan().domain()),\n          broad(),\n          connectivity(),\n          tlssession(),\n          pki(),\n          tlshandshake()\n        ]\n      ]);\n    }\n  };\n\n  scan.Model.scan = function(domain) {\n    if (domain) {\n      return m.request({\n        method: 'GET',\n        url: '/api/v1/cfssl/scan',\n        data: {\n          host: domain\n        },\n        unwrapSuccess: function(response) {\n          if (!response.success) {\n            throw new Error(response.messages.join(', '));\n          }\n\n          return response.result;\n        },\n        unwrapError: function(response) {\n          return response.errors;\n        }\n      })\n      .then(function(response) {\n        var results = new scan.Model({\n          domain: domain,\n          IntermediateCAs: response.Broad && response.Broad.IntermediateCAs,\n          DNSLookup: response.Connectivity.DNSLookup,\n          TCPDial: response.Connectivity.TCPDial,\n          TLSDial: response.Connectivity.TLSDial,\n          ChainExpiration: response.PKI.ChainExpiration,\n          ChainValidation: response.PKI.ChainValidation,\n          CipherSuite: response.TLSHandshake.CipherSuite,\n          SessionResume: response.TLSSession.SessionResume\n        });\n\n        return results;\n      });\n    }\n\n    return m.deferred.reject();\n  };\n\n  var bundle = {\n    vm: {\n      init: function(domain) {\n        bundle.vm.domain = m.prop(domain ? domain : '');\n        bundle.vm.flavor = m.prop('ubiquitous');\n        bundle.vm.loading = m.prop(false);\n        bundle.vm.Bundle = m.prop(false);\n        bundle.vm.bundle = function(evt) {\n          var domain = bundle.vm.domain();\n          var flavor = bundle.vm.flavor();\n          bundle.vm.Bundle(false);\n          bundle.vm.loading(true);\n\n          if (evt) {\n            evt.preventDefault();\n          }\n\n          setTimeout(function() {\n            bundle.Model.bundle(domain, flavor).then(function(result) {\n              bundle.vm.loading(false);\n              bundle.vm.Bundle(result);\n            });\n          }, 0);\n        };\n\n        // TODO: remove!\n        if (domain) {\n          bundle.vm.loading(true);\n          setTimeout(function() {\n            bundle.Model.bundle(domain, bundle.vm.flavor()).then(function(result) {\n              bundle.vm.loading(false);\n              bundle.vm.Bundle(result);\n            });\n          }, 0);\n        }\n      }\n    },\n    Model: function(data) {\n      this.domain = m.prop(data.domain);\n      this.bundle = m.prop(data.bundle);\n      this.expires = m.prop(data.expires);\n      this.messages = m.prop(data.messages);\n      this.oscp = m.prop(data.oscp);\n    },\n    controller: function() {\n      bundle.vm.init(m.route.param('domain'));\n      page.title(Tformat('bundle.title'))\n      return;\n    },\n    view: function() {\n      var results = bundle.vm.Bundle();\n      return appWrapper([\n        m('h1.page-header', Tformat('bundle.title')),\n        m('form.form-horizontal', [\n          m('.form-group', [\n            m('label.col-sm-2.control-label[for=bundlehost]', Tformat('common.host')),\n            m('.col-sm-8', [\n              m('input.form-control#bundlehost[placeholder=\"cfssl.org\"]', {\n                value: bundle.vm.domain(),\n                onchange: m.withAttr('value', bundle.vm.domain)\n              })\n            ])\n          ]),\n          m('.form-group', [\n            m('label.col-sm-2.control-label[for=bundleflavor]', Tformat('bundle.flavor')),\n            m('.col-sm-8', [\n              m('select#bundleflavor', {\n                value: bundle.vm.flavor(),\n                onchange: m.withAttr('value', bundle.vm.flavor)\n              }, [\n                m('option[value=\"ubiquitous\"]', Tformat('bundle.ubiquitous')),\n                m('option[value=\"optimal\"]', Tformat('bundle.optimal')),\n                m('option[value=\"force\"]', Tformat('bundle.force'))\n              ])\n            ])\n          ]),\n          m('.form-group', [\n            m('.col-sm-offset-2 col-sm-10', [\n              m('button.btn.btn-default[type=\"submit\"]', {\n                onclick: bundle.vm.bundle,\n                disabled: bundle.vm.loading()\n              }, Tformat('bundle.action'))\n            ])\n          ])\n        ]),\n        !bundle.vm.loading() ? '' : [\n          m('p', 'Bundling ' + bundle.vm.domain())\n        ],\n        !results ? '' : [\n          m('h2.page-header', 'Results for ' + bundle.vm.Bundle().domain()),\n          m.component(panel, {\n            title: Tformat('bundle.bundle.title'),\n            body: m('pre', results.bundle())\n          }, !results.messages().length ? '' : m.component(listGroup, results.messages())),\n        ]\n      ]);\n    }\n  };\n\n  bundle.Model.bundle = function(domain, flavor) {\n    if (domain && flavor) {\n      return m.request({\n        method: 'POST',\n        url: '/api/v1/cfssl/bundle',\n        data: {\n          domain: domain,\n          flavor: flavor\n        },\n        unwrapSuccess: function(response) {\n          if (!response.success) {\n            throw new Error(response.messages.join(', '));\n          }\n\n          return response.result;\n        },\n        unwrapError: function(response) {\n          return response.errors;\n        }\n      })\n      .then(function(response) {\n        var results = new bundle.Model({\n          domain: domain,\n          bundle: response.bundle,\n          expires: response.expires,\n          messages: response.status && response.status.messages || [],\n          oscp: response.oscp_support\n        });\n\n        return results;\n      });\n    }\n\n    return m.deferred.reject();\n  }\n\n  m.route.mode = 'pathname';\n\n  m.route(document.body, '/', {\n    '/': home,\n    '/bundle': bundle,\n    '/bundle/:domain': bundle,\n    '/scan': scan,\n    '/scan/:domain': scan\n  });\n\n  window.scan = scan;\n  window.bundle = bundle;\n}());\n"),
	}
	file4 := &embedded.EmbeddedFile{
		Filename:    "index.html",
		FileModTime: time.Unix(1459300464, 0),

		Content: string("<!DOCTYPE html>\n<title>CFSSL</title>\n<link href=\"//cdnjs.cloudflare.com/ajax/libs/bootswatch/3.3.4/yeti/bootstrap.min.css\" rel=\"stylesheet\">\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/mithril/0.2.0/mithril.js\"></script>\n<script src=\"/assets/cfssl.js\" async></script>\n<body></body>"),
	}

	// define dirs
	dir1 := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1459300464, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file4, // "index.html"

		},
	}
	dir2 := &embedded.EmbeddedDir{
		Filename:   "assets",
		DirModTime: time.Unix(1459300464, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file3, // "assets/cfssl.js"

		},
	}

	// link ChildDirs
	dir1.ChildDirs = []*embedded.EmbeddedDir{
		dir2, // "assets"

	}
	dir2.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`static`, &embedded.EmbeddedBox{
		Name: `static`,
		Time: time.Unix(1459300464, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"":       dir1,
			"assets": dir2,
		},
		Files: map[string]*embedded.EmbeddedFile{
			"assets/cfssl.js": file3,
			"index.html":      file4,
		},
	})
}
